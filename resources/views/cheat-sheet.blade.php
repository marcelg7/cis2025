@extends('layouts.app')

@section('content')
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" style="overflow: visible;">
        <!-- Header with Search and Actions -->
        <div class="mb-6">
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">CSR Cheat Sheet</h1>
                    <p class="mt-1 text-sm text-gray-600">Quick reference guide for creating and managing contracts</p>
                </div>
                <div class="flex gap-2">
                    <button onclick="window.print()" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"/>
                        </svg>
                        Print
                    </button>
                    <button onclick="toggleAllSections()" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
                        </svg>
                        Toggle All
                    </button>
                </div>
            </div>

            <!-- Search Box -->
            <div class="relative">
                <input
                    type="text"
                    id="searchBox"
                    placeholder="Search for topics..."
                    class="w-full px-4 py-3 pl-11 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    onkeyup="searchContent()"
                >
                <svg class="absolute left-3 top-3.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                </svg>
            </div>
        </div>

        <div class="flex gap-6" style="overflow: visible;">
            <!-- Sidebar Table of Contents (Desktop) -->
            <aside class="hidden lg:block lg:w-64 flex-shrink-0" style="align-self: flex-start;">
                <div id="stickyNav" style="position: sticky; position: -webkit-sticky; top: 1rem;">
                    <div class="bg-white border border-gray-200 rounded-lg shadow-sm p-4" style="max-height: calc(100vh - 2rem); overflow-y: auto;">
                        <h3 class="font-semibold text-gray-900 mb-3 text-sm uppercase tracking-wide">Quick Navigation</h3>
                        <nav id="tocNav" class="space-y-1">
                            <!-- TOC will be generated by JavaScript -->
                        </nav>
                    </div>
                </div>
            </aside>

            <!-- Main Content -->
            <div class="flex-1 min-w-0">
                <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
                    <div id="mainContent" class="cheat-sheet-content">
                        {!! \App\Helpers\MarkdownHelper::sanitize($content) !!}
                    </div>
                </div>

                <!-- Back to Top Button -->
                <button
                    id="backToTop"
                    onclick="scrollToTop()"
                    class="fixed bottom-8 right-8 bg-blue-600 text-white p-3 rounded-full shadow-lg hover:bg-blue-700 transition-all"
                    style="z-index: 50; opacity: 0; pointer-events: none;"
                >
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"/>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <style>
        /* Hide print/toggle buttons when printing */
        @media print {
            button, #searchBox, #tocNav { display: none; }
            .cheat-sheet-content { padding: 0 !important; }
        }

        /* Custom styles for cheat sheet markdown content */
        .cheat-sheet-content {
            color: #374151;
            font-size: 0.9375rem;
            line-height: 1.7;
            padding: 2rem;
        }

        .cheat-sheet-content p {
            margin-bottom: 1rem;
        }

        .cheat-sheet-content ul,
        .cheat-sheet-content ol {
            margin-bottom: 1rem;
            margin-left: 1.5rem;
            padding-left: 0.5rem;
        }

        .cheat-sheet-content li {
            margin-bottom: 0.5rem;
            line-height: 1.7;
        }

        .cheat-sheet-content ul li {
            list-style-type: disc;
        }

        .cheat-sheet-content ol li {
            list-style-type: decimal;
        }

        .cheat-sheet-content code {
            padding: 0.125rem 0.375rem;
            background-color: #1f2937;
            color: #f3f4f6;
            border-radius: 0.25rem;
            font-size: 0.8125rem;
            font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;
        }

        .cheat-sheet-content pre {
            padding: 1rem;
            background-color: #1f2937;
            color: #f3f4f6;
            border-radius: 0.5rem;
            overflow-x: auto;
            margin-bottom: 1rem;
            font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;
        }

        .cheat-sheet-content pre code {
            padding: 0;
            background-color: transparent;
            font-size: 0.8125rem;
        }

        .cheat-sheet-content strong {
            font-weight: 600;
            color: #111827;
        }

        .cheat-sheet-content em {
            font-style: italic;
        }

        .cheat-sheet-content a {
            color: #4f46e5;
            text-decoration: underline;
        }

        .cheat-sheet-content a:hover {
            color: #3730a3;
        }

        /* Headings with collapsible functionality */
        .cheat-sheet-content h1,
        .cheat-sheet-content h2 {
            cursor: pointer;
            position: relative;
            padding-left: 2rem;
            transition: all 0.2s;
        }

        .cheat-sheet-content h1:hover,
        .cheat-sheet-content h2:hover {
            color: #4f46e5;
        }

        .cheat-sheet-content h1::before,
        .cheat-sheet-content h2::before {
            content: 'â–¼';
            position: absolute;
            left: 0.5rem;
            font-size: 0.75em;
            transition: transform 0.2s;
            color: #6b7280;
        }

        .cheat-sheet-content h1.collapsed::before,
        .cheat-sheet-content h2.collapsed::before {
            transform: rotate(-90deg);
        }

        .cheat-sheet-content h1 {
            font-size: 1.875rem;
            font-weight: 700;
            color: #111827;
            margin-bottom: 1.5rem;
            margin-top: 2.5rem;
            padding-bottom: 0.75rem;
            border-bottom: 2px solid #e5e7eb;
            scroll-margin-top: 2rem;
        }

        .cheat-sheet-content h1:first-child {
            margin-top: 0;
        }

        .cheat-sheet-content h2 {
            font-size: 1.5rem;
            font-weight: 600;
            color: #111827;
            margin-bottom: 1rem;
            margin-top: 2rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #e5e7eb;
            scroll-margin-top: 2rem;
        }

        .cheat-sheet-content h3 {
            font-size: 1.25rem;
            font-weight: 600;
            color: #111827;
            margin-bottom: 0.75rem;
            margin-top: 1.5rem;
        }

        .cheat-sheet-content h4 {
            font-size: 1.125rem;
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.5rem;
            margin-top: 1.25rem;
        }

        .cheat-sheet-content blockquote {
            border-left: 4px solid #3b82f6;
            background-color: #eff6ff;
            padding: 1rem 1rem 1rem 1.25rem;
            border-radius: 0.375rem;
            font-style: normal;
            color: #1e40af;
            margin: 1rem 0;
        }

        .cheat-sheet-content hr {
            border-color: #d1d5db;
            margin: 2rem 0;
        }

        .cheat-sheet-content table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1.5rem;
            font-size: 0.875rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .cheat-sheet-content table th {
            background-color: #f3f4f6;
            padding: 0.75rem;
            text-align: left;
            font-weight: 600;
            border: 1px solid #d1d5db;
        }

        .cheat-sheet-content table td {
            padding: 0.75rem;
            border: 1px solid #e5e7eb;
        }

        .cheat-sheet-content table tr:nth-child(even) {
            background-color: #f9fafb;
        }

        .cheat-sheet-content table tr:hover {
            background-color: #f3f4f6;
        }

        /* Section collapsing */
        .collapsed {
            display: none !important;
        }

        /* But keep headings visible when collapsed */
        .cheat-sheet-content h1.collapsed,
        .cheat-sheet-content h2.collapsed {
            display: block !important;
        }

        /* Highlight search results */
        .search-highlight {
            background-color: #fef08a;
            padding: 0.125rem 0.25rem;
            border-radius: 0.25rem;
        }

        /* Sticky sidebar */
        .sticky {
            position: -webkit-sticky;
            position: sticky;
        }

        /* TOC Styles */
        #tocNav a {
            display: block;
            padding: 0.5rem 0.75rem;
            color: #6b7280;
            text-decoration: none;
            font-size: 0.875rem;
            border-radius: 0.375rem;
            transition: all 0.2s;
            border-left: 2px solid transparent;
        }

        #tocNav a:hover {
            background-color: #f3f4f6;
            color: #111827;
        }

        #tocNav a.active {
            background-color: #eff6ff;
            color: #2563eb;
            border-left-color: #2563eb;
            font-weight: 500;
        }

        #tocNav a.level-2 {
            padding-left: 1.5rem;
            font-size: 0.8125rem;
        }

        /* Back to top button animation */
        #backToTop.visible {
            opacity: 1 !important;
            pointer-events: auto !important;
        }
    </style>

    <script>
        // Generate Table of Contents
        function generateTOC() {
            const content = document.querySelector('.cheat-sheet-content');
            const toc = document.getElementById('tocNav');
            const headings = content.querySelectorAll('h1, h2');

            let tocHTML = '';
            headings.forEach((heading, index) => {
                const id = 'heading-' + index;
                heading.id = id;
                const level = heading.tagName === 'H1' ? '1' : '2';
                const text = heading.textContent.trim();

                tocHTML += `<a href="#${id}" class="level-${level}" onclick="scrollToHeading('${id}', event)">${text}</a>`;
            });

            toc.innerHTML = tocHTML;
        }

        // Scroll to heading smoothly
        function scrollToHeading(id, event) {
            event.preventDefault();
            const element = document.getElementById(id);
            element.scrollIntoView({ behavior: 'smooth', block: 'start' });

            // Update active state
            document.querySelectorAll('#tocNav a').forEach(a => a.classList.remove('active'));
            event.target.classList.add('active');
        }

        // Make headings collapsible
        function makeCollapsible() {
            const headings = document.querySelectorAll('.cheat-sheet-content h1, .cheat-sheet-content h2');
            console.log('Cheat Sheet: Making', headings.length, 'headings collapsible');

            headings.forEach(heading => {
                heading.addEventListener('click', function() {
                    console.log('Cheat Sheet: Heading clicked:', this.textContent.trim());
                    this.classList.toggle('collapsed');

                    // Find content until next heading of same or higher level
                    let next = this.nextElementSibling;
                    while (next) {
                        if (next.tagName === 'H1' || next.tagName === 'H2') {
                            break;
                        }
                        next.classList.toggle('collapsed');
                        next = next.nextElementSibling;
                    }
                });
            });
        }

        // Toggle all sections
        function toggleAllSections() {
            console.log('Cheat Sheet: Toggle All clicked');
            const headings = document.querySelectorAll('.cheat-sheet-content h1, .cheat-sheet-content h2');
            const firstHeading = headings[0];
            const isCollapsed = firstHeading.classList.contains('collapsed');
            console.log('Cheat Sheet: Currently collapsed?', isCollapsed);

            headings.forEach(heading => {
                if (isCollapsed) {
                    heading.classList.remove('collapsed');
                } else {
                    heading.classList.add('collapsed');
                }
            });

            const content = document.querySelectorAll('.cheat-sheet-content h1 ~ *, .cheat-sheet-content h2 ~ *');
            content.forEach(el => {
                if (el.tagName !== 'H1' && el.tagName !== 'H2') {
                    if (isCollapsed) {
                        el.classList.remove('collapsed');
                    } else {
                        el.classList.add('collapsed');
                    }
                }
            });
        }

        // Search functionality
        function searchContent() {
            const searchTerm = document.getElementById('searchBox').value.toLowerCase();
            const content = document.querySelector('.cheat-sheet-content');

            // Remove previous highlights
            const highlighted = content.querySelectorAll('.search-highlight');
            highlighted.forEach(el => {
                const parent = el.parentNode;
                parent.replaceChild(document.createTextNode(el.textContent), el);
                parent.normalize();
            });

            if (searchTerm.length < 3) return;

            // Expand all sections when searching
            document.querySelectorAll('.collapsed').forEach(el => el.classList.remove('collapsed'));

            // Highlight matching text
            highlightText(content, searchTerm);
        }

        function highlightText(element, searchTerm) {
            const walker = document.createTreeWalker(
                element,
                NodeFilter.SHOW_TEXT,
                null,
                false
            );

            const nodesToReplace = [];
            let node;

            while (node = walker.nextNode()) {
                if (node.parentNode.tagName === 'SCRIPT' || node.parentNode.tagName === 'STYLE') continue;

                const text = node.textContent;
                const lowerText = text.toLowerCase();

                if (lowerText.includes(searchTerm)) {
                    nodesToReplace.push(node);
                }
            }

            nodesToReplace.forEach(node => {
                const text = node.textContent;
                const lowerText = text.toLowerCase();
                const fragment = document.createDocumentFragment();
                let lastIndex = 0;
                let index = lowerText.indexOf(searchTerm);

                while (index !== -1) {
                    // Add text before match
                    if (index > lastIndex) {
                        fragment.appendChild(document.createTextNode(text.substring(lastIndex, index)));
                    }

                    // Add highlighted match
                    const span = document.createElement('span');
                    span.className = 'search-highlight';
                    span.textContent = text.substring(index, index + searchTerm.length);
                    fragment.appendChild(span);

                    lastIndex = index + searchTerm.length;
                    index = lowerText.indexOf(searchTerm, lastIndex);
                }

                // Add remaining text
                if (lastIndex < text.length) {
                    fragment.appendChild(document.createTextNode(text.substring(lastIndex)));
                }

                node.parentNode.replaceChild(fragment, node);
            });
        }

        // Back to top button
        function scrollToTop() {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        // Show/hide back to top button - initialize after DOM is ready
        function initScrollHandlers() {
            console.log('Cheat Sheet: Scroll handlers initialized');

            window.addEventListener('scroll', function() {
                const backToTop = document.getElementById('backToTop');
                if (backToTop) {
                    if (window.pageYOffset > 300) {
                        backToTop.classList.add('visible');
                    } else {
                        backToTop.classList.remove('visible');
                    }
                }

                // Update active TOC item
                updateActiveTOC();
            });
        }

        // Update active TOC item based on scroll position
        function updateActiveTOC() {
            const headings = document.querySelectorAll('.cheat-sheet-content h1, .cheat-sheet-content h2');
            let activeHeading = null;

            headings.forEach(heading => {
                const rect = heading.getBoundingClientRect();
                if (rect.top <= 100 && rect.top >= -rect.height) {
                    activeHeading = heading;
                }
            });

            if (activeHeading) {
                document.querySelectorAll('#tocNav a').forEach(a => a.classList.remove('active'));
                const activeLink = document.querySelector(`#tocNav a[href="#${activeHeading.id}"]`);
                if (activeLink) activeLink.classList.add('active');
            }
        }

        // Initialize on page load - delay to avoid Alpine.js conflicts
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initCheatSheet);
        } else {
            initCheatSheet();
        }

        function initCheatSheet() {
            // Delay execution to ensure Alpine.js has initialized
            setTimeout(function() {
                console.log('Cheat Sheet: Initializing...');
                generateTOC();
                makeCollapsible();
                initScrollHandlers();
                console.log('Cheat Sheet: Initialized successfully');
            }, 200);
        }
    </script>
@endsection
